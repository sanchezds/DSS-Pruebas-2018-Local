{
    "collab_server" : "",
    "contents" : "---\ntitle: \"IBM Data Science Experience\"\nruntime: shiny\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n    vertical_layout: fill\n    source_code: https://github.com/IBMDataScience/SparkSummitDemo\n    social: [ \"twitter\", \"facebook\", \"linkedin\" ]\n\n    \n---\n\nData Exploration \n=====================================\n\n```{r setup, include=FALSE}\n\n\n### Run this first before Knitting the RMD ##############\nif(!require(devtools)){\n    install.packages(\"devtools\")\n    library(devtools)\n}\n\nif(!require(flexdashboard)){\n    install_github(\"gfilla/flexdashboard\")\n    library(flexdashboard)\n}\n\n########################################################\n\n#check for packages install if necessary\npackages <- function(x){\n  x <- as.character(match.call()[[2]])\n  if (!require(x,character.only=TRUE)){\n    install.packages(pkgs=x,repos=\"http://cran.us.r-project.org\")\n    require(x,character.only=TRUE)\n  }\n}\npackages(shiny)\npackages(leaflet)\npackages(rbokeh)\npackages(ggplot2)\npackages(knitr)\npackages(dplyr)\npackages(plotly)\npackages(xts)\npackages(dygraphs)\npackages(png)\npackages(RCurl)\nlibrary(devtools)\nlibrary(shiny)\nlibrary(flexdashboard)\nlibrary(leaflet)\nlibrary(rbokeh)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(xts)\nlibrary(dygraphs)\nlibrary(png)\nlibrary(RCurl)\n\n#setwd('/srv/shiny-server/shinyDemo')\nsetwd('~/')#home \n\ndatdf <- getURL('https://raw.githubusercontent.com/IBMDataScience/SparkSummitDemo/master/data/clusterEnergyLocation.csv')\ndf <- read.csv(text = datdf)\n\n#Jitter buildings that are at same lat/long\ndf$Lat <- round(jitter(df$Lat, factor = 0.00001),5)\ndf$Long<- round(jitter(df$Long, factor = 0.00001),5)\n\n\ndf$kmeans_label <- df$kmeans_label + 1\ndf$kmeans_label <- as.factor(df$kmeans_label)\ndf$ReClustering <- df$ReClustering+1\ndf$ReClustering <- as.factor(df$ReClustering)\n\ndf$plugChg <-mean(df$plug_load_consumption)/df$plug_load_consumption  - 1\ndf$acChg <- mean(df$ac_consumption)/df$ac_consumption - 1\ndf$domesticChg <-mean(df$domestic_gas)/df$domestic_gas - 1\ndf$heatingChg <-mean(df$heating_gas)/df$heating_gas - 1\ndf$EnergySurplus <- round(((1*(df$plugChg + df$acChg + df$domesticChg + df$heatingChg))/4)*100,0)\n\ndf$billValues <- gsub('\\\\$','', df$Annual.Energy.Bill..USD.)\ndf$billValues <- gsub(',','', df$billValues)\ndf$billValues <- as.numeric(gsub(' ','', df$billValues))\n\ndat <- getURL('https://raw.githubusercontent.com/IBMDataScience/SparkSummitDemo/master/data/CombinedSensorData.csv')\nallSensors <- read.csv(text = dat)\n\nallSensors$Unitarian.s <- as.POSIXct(allSensors$Unitarian.s,format='%m/%d/%Y %H:%M')\ntemps <- data.frame(allSensors$Unitarian.s, allSensors$Unitarian.t, allSensors$Parish.t, allSensors$Basement.t,allSensors$Office.t)\ncolnames(temps) <- c('Time','SanctuaryTemp','ParishTemp','BasementTemp','OfficeTemp')\nt<- temps[,-1]\nallTemps <- xts(t,order.by = temps$Time)\n\n#function used for scoring\nscoreProperty <- function(num_stories,sq_feet, num_plugged_equipment){\n    # b's come from regression model\n    # n's come from normalization\n    b0 = -0.030743500313\n    b2 = 0.0285973339538 \n    b3 = 0.668102284559 \n    b4 = 0.374074888107\n    \n    n0 = 380400.00\n    n2 = 4.00\n    n3 = 65000.00\n    n4 = 43.00\n\n    x2 = num_stories/n2\n    x3 = sq_feet/n3\n    x4 = num_plugged_equipment/n4\n    energy = b0 + b2 * x2 + b3 * x3 + b4 * x4\n    kWh = energy*n0\n    usd = kWh*0.18 # $0.18 per kWh in NYC (on average)\n    return(c(kWh, usd))\n  }\n\nbplogo <- \"https://raw.githubusercontent.com/IBMDataScience/SparkSummitDemo/master/blocpowertransp.png\"\n\n```\n\nRow {data-height=200}\n-----------------------------------------------------------------------\n\n### ![blocpower](`r bplogo`) Build a Better World.  Develop green energy projects in American inner cities.\n\n```{r}\nrenderValueBox({\n  \n  valueBox(value = '', icon = \"\")\n})\n\n```\n\n### Annual Energy Bill (USD)\n\n```{r}\nrenderValueBox({\n  bill <- prop_data()\n  #cat(toString(bill))\n  cat(toString(getwd()))\n  valueBox(value = bill$Annual.Energy.Bill..USD., icon = \"glyphicon-usd\")\n})\n```\n\n### Average Energy Compared to Benchmark\n\n```{r}\nrenderValueBox({\n  energyUse <- prop_data()$EnergySurplus\n  valueBox(value = paste0(energyUse,'%'), \n           icon = \"glyphicon-tree-deciduous\",\n           color =   ifelse(energyUse < 0, \"danger\", \"success\")\n           )\n})\n```\n\n\n\nRow {data-height=600}\n-----------------------------------------------------------------------\n\n### Energy Consumption Map \n\n```{r}\n\nclick_marker <- eventReactive(input$map_marker_click, {\n\n    x <- input$map_marker_click\n    \n    y <-c(x[3], x[4])\n    #cat(toString(y))\n    return(y)\n  })\n\n\nqpal <- colorQuantile(\"YlGnBu\", df$Measured)\n\noutput$map <- renderLeaflet({\n\n    map2 <- leaflet(data = df) %>% \n      addProviderTiles(\"CartoDB.Positron\")%>% \n      addCircleMarkers(\n          radius = 6,\n          fillColor = ~qpal(df$Measured),fillOpacity = 0.7,\n          stroke = T, weight =2,color='#2b1d0e',\n          popup = paste('Property: ', df$property_name,\"<br> Annual Bill: \", df$Annual.Energy.Bill..USD.)) %>% \n      addLegend(position = \"bottomright\",na.label = \"NA\", title=\"Annual Energy Cost\",colors=c('#FFFFD9','#99D6B9','#2280B8','#081D58'), labels = c('< $2,000','$2,000 - $4,000','$4,001- $6,000','$6,000 +'))\n    map2\n})\n\n\n\nprop_data <- reactive({\n  \n  clicked_building <- click_marker()\n  # Fetch data for the clicked tract\n    barchart_values <- df[which(df$Lat == round(as.numeric(clicked_building[1]),5) & df$Long == round(as.numeric(clicked_building[2]),5)),]\n  # barchart_values <- df[which(df$Lat == as.vector(clicked_building[1]) & df$Long == as.vector(clicked_building[2])),]\ncat(toString(barchart_values))\n  return(barchart_values)\n\n})\n\nleafletOutput('map')  \n\n```\n\n### Selected Building Energy Types\n\n```{r}\n\noutput$bars <- renderPlotly({\n  barplot_data <- prop_data()\n  #cat(toString(barplot_data))\n  \n  xLabel <- list(\n  title = \" \"\n )\n  yLabel <- list(\n  title = \"Energy Consumption\",\n  showticklabels = F,\n  range = list(0,1)\n) \n  \n  \n  if(dim(barplot_data)[1] != 0){\n    \n    #print(barplot_data)\n        updated_vals <- c(barplot_data$plug_load_consumption, barplot_data$ac_consumption, barplot_data$domestic_gas, barplot_data$heating_gas)\n      \n      p <- plot_ly(\n        x = c('Plug','AC','Home Gas', 'Heat Gas'),\n        y = updated_vals,\n        name = \"Selected Property Values\",\n        type = \"bar\") %>% \n        layout(xaxis = xLabel, yaxis=yLabel)\n     p \n  }else{\n      bar_vals <- c(mean(df$plug_load_consumption), mean(df$ac_consumption), mean(df$domestic_gas), mean(df$heating_gas))\n    \n        p <- plot_ly(\n            x =c('Plug','AC','Home Gas', 'Heat Gas'),\n            y = bar_vals,\n            name = \"Mean Property Values\",\n            type = \"bar\") %>% \n            layout(xaxis = xLabel, yaxis=yLabel)\n       p\n  }\n  \n    p2 <- add_trace(\n      p,\n      x =c('Plug','AC','Home Gas', 'Heat Gas'),\n      y = c(mean(df$plug_load_consumption),mean(df$ac_consumption), mean(df$domestic_gas),mean(df$heating_gas)),\n      name = \"Mean Values\",\n      type = \"bar\")\n  p2\n  \n})  \n\nplotlyOutput('bars')\n\n```\n\n\nRow {data-height=300}\n-----------------------------------------------------------------------\n\n\n### Sensor Temperature Data - Different Building Locations\n\n```{r}\n  \ndygraph(allTemps)\n\n\n```\n\n\nCluster Analysis\n=====================================\n\n\nRow\n-----------------------------------------------------------------------\n\n### Energy Consumption Map\n\n```{r}\n\n\n# qualPalette <- c(\"#d7191c\", \"#fdae61\", \"#a6d96a\", \"#1a9641\")\n# clusterLabels <- seq(1:4)\n# df$color <- qualPalette[match(df$kmeans_label, clusterLabels)]\n# qpal2 <- colorFactor(palette=qualPalette, df$kmeans_label)\n\nqualPalette <- c(\"#1a9641\",\"#d7191c\")\nclusterLabels <- seq(1:2)\ndf$color <- qualPalette[match(df$ReClustering, clusterLabels)]\nqpal2 <- colorFactor(palette=qualPalette, df$ReClustering)\n\n\n  map2 <- leaflet(data = df) %>% \n    \n  addProviderTiles(\"CartoDB.Positron\")%>% \n  addCircleMarkers(\n    lng = df$Long,\n    lat = df$Lat,\n    radius = 6,\n    color = ~qpal2(df$ReClustering),\n    stroke = F, fillOpacity = 0.7,\n    popup = ~property_name)\n\naddLegend(map2,position = \"bottomright\", colors=qualPalette,labels=c(\"Efficient\",\"Inefficient\"),na.label = \"NA\", title=\"Cluster Labels\", opacity =0.7)\nmap2  \n\n\n```\n\n### Clusters by Heating and Plug Consumption\n\n```{r}\n\np2 <- figure() %>%\n  ly_points(heating_gas*100, plug_load_consumption*100, data = df,fill_color =color,fill_alpha = 0.6, hover = c(property_name,Annual.Energy.Bill..USD. ), xlab='Heating Gas', ylab = 'Plug Load Consumption') %>% \ny_axis(number_formatter = \"printf\", format = \"%d%%\") %>% \nx_axis(number_formatter = \"printf\", format = \"%d%%\")\np2\n\n\n\n```\n\nPredictive Model\n=====================================\n\nRow  {.sidebar data-width=400}\n-----------------------------------------------------------------------\n\n### Predict Energy Use and Cost for New Property\n\n```{r}\n\n#coefficient 1 - Stories\nsliderInput(\"stories\", \"Enter number of Stories:\",\n            min = 0, max = 4, value = 1, step = 1\n)\n#coefficient 2 - Sq. Foot\nsliderInput(\"sqft\", \"Enter Property Square Footage:\",\n            min = 0, max = 65000, value = 20000, step = 100\n)\n\n#coefficient 3 - # of Plugged Outlets\nsliderInput(\"plugged\", \"Enter Number of Plugged Outlets:\",\n            min = 0, max = 43, value = 29, step = 1\n)\n\n\nscore <- reactive({\n  scoreProperty(input$stories,input$sqft,input$plugged)\n})\n\n#cat(toString(score[1]))\n \n\n```\n\nRow {data-height=200}\n-----------------------------------------------------------------------\n\n\n\n### Predicted Annual Energy Bill (USD @ $0.18/kWh)\n\n```{r}\nrenderGauge({\n  bill<- score()[2]\n  gauge(bill, min = 0, max = 100000, symbol = '$', gaugeSectors(\n  success = c(0, 2000), warning = c(2001, 15000), danger = c(15001, 100000)))\n  \n})\n  \n```\n\n### Predicted Annual Energy (kWh)\n\n```{r}\n\nrenderGauge({\n  kwh <- score()[1]\n  gauge(kwh, min = 0, max = 380400, gaugeSectors(\n success = c(0, 100000), warning = c(100001,200000), danger = c(200001,400000)))\n  \n})\n\n```\n\n\nRow \n-----------------------------------------------------------------------\n\n\n### Accuracy of Linear Regression Fit\n\n```{r}\n\n p3 <- figure() %>%\nly_points(Measured ,Predicted, data = df,fill_color = color, fill_alpha=0.6,hover = c(property_name, ReClustering), xlab='Measured Energy Usage', ylab='Predicted Energy Usage') \np3<- ly_abline(p3,a=0, b=1, color='blue')\np3\n\n\n```\n\nData Table\n=====================================\n\n\nColumn \n-----------------------------------------------------------------------\n\n### Raw Data Table\n\n```{r}\n\n  kable(df)\n\n\n\n```",
    "created" : 1524483849991.000,
    "dirty" : false,
    "encoding" : "",
    "folds" : "",
    "hash" : "223207185",
    "id" : "8A1275BB",
    "lastKnownWriteTime" : 1524484103,
    "last_content_update" : 1524484103958,
    "path" : "~/DSSpruebas2018/R Energy.Rmd",
    "project_path" : null,
    "properties" : {
        "last_setup_crc32" : "B013CE9E984c9d83",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}